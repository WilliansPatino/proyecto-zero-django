Arrancar el proyecto

	$ django-admin startproject ProyectoDjango

Crear la aplicacion principal

	$ python3 manage.py startapp mainapp

Crear vistas, urls y templates

		o agregar las vistas
		o Ajustar setting.py

		Inicio, About

Crear la aplicacion para las paginas

	$ python3 manage.py startapp pages

Generar las migracion  de los modelos 

	$ python3 manage.py makemigrations

General las bases de datos y el codigo SQL

	$ python3 manage.py sqlmigrate pages 0001

	$ python3 manage.py migrate
	
# Crear el administrador del panel
	 $python3 manage.py createsuperuser
 
#-- Agregar texto enriquecido en django 
 

	 $ pip3 install django-ckeditor

#--- Mas info con ckeditor
#
#  https://ckeditor.com/latest/samples/toolbarconfigurator/index.html#basic




 
 
# migrar los models para agregar el campor order 
 
\t $ python3 manage.py makemigrations
 
# migrar las BD y codigo SQL  
	 $ python3 manage.py sqlmigrate pages 0002
 
# Hacer los cambios en las bases de datos  
 
	  manage.py migrate
 
---- 17.11.2020 --- 

  507  python3 manage.py startapp blog
  508  ll
  509  python3 manage.py runserver
  510  python3 manage.py makemigrations
  511  python manage.py sqlmigrate blog 0001
  512  python3 manage.py sqlmigrate blog 0001
  513  python3 manage.py migrate
  514  # cargar modelos en el panel de administracion
  515  history
  516  python3 manage.py runserver
  517  python3 manage.py runserver
  518  history
  519  echo " " >> ../bitacora 
  520  echo "---- 17.11.2020 --- " >> ../bitacora 
  521  history >> ../bitacora 

---- 18.11.2020
Vistas y URLs para el listado de los articulos

	o 	crear la url de articulos en 'blog/urls.py' 

			copiar el codigo de cualquier otra 'urls.py'. Por ejemplo de
				'mainapp/urls.py'


		...
			 path('articulos/', views.list, name='articles-list')
		...

				==>  views.list 


	o 	crear el archivo en 'blog/views.py'

			En este archivo, crear la funcion 'list'



			def list(request):

				return render(request, 'articles/list.html', {
				'title': 'Artículos'
				})

	o 	crear el directorio 'blog/templates' 

	o 	Dentro del directorio 'blog/templates' crear  los directorios:

				'blog/templates/articles'

				'blog/templates/categories'

	o 	Dentro del directorio 'blog/templates/articles', crear el archivo 'list.html'


			tomar el codigo de otra template, por ejemplo: 'pages/templates/pages.html',
			copiar en 'blog/templates/articles/list.html'



	o 	En el archivo principal de URLs de proyecto, 'ProyectoDjango/urls.py'

			cargar la urls de articulos:


				urlpatterns = [
				..
				...
				..
				path('', include('blog.urls'))
				]


Sacar el listado de articulos en la página

	o 	agregar en la vista 'blog/views.py'

			 articles = Article.objects.all()

			 return(request...., {
			 ..
			 'articles': articles
			 })

Habilitar la carga de imagen para el articulo

	o 	En la raiz del proyecto, agregar una carpeta llamada 'media' 

			'ProyectoDjango/media'

	o 	Luego, configurar en el model 'Article', el campo 'imagen' y agregar:

			imagen = ... (, upload_to='articles')			

	o 	Hacer las configuraciones dentro del Framework

			Ajustar/modificar en el archivo 'settings.py' al final de todo

			# media
			MEDIA_URL = '/media/'
			MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

	o 	Para que se pueda subir imagenes y hace disponible  una URL  para visualizarlas,
		es necesario agregar una configuracion en la raiz del proyecto.

			en 'ProyectoDjango/urls.py' agregar:

				# ruta de imagenes
				if settings.DEBUG: 
    				from django.conf.urls.static import static
    				urlpatterns += static(settings.MEDIA_URL, 
    				document_root=settings.MEDIA_ROOT)

			Tambien agregar en el mismo archivo:

				from django.conf import settings


Ordenar los artículos (cambiar el criterio de ordenacion) de mas nuevo a mas viejo.

	o 	Bien, modificar en el modelo de articulos, 'blog/models.py'

		agregar en la clase Meta:

			...
			ordering = ['-created_at']



Agregar Menu desplegable de categorias

	o  ajustar en el código

Mostrar las categorias provenientes del archivos

	o 	Crear el archivo en 'blog/processor.py'

		Tomado el código de 'pages/context_proccesor.py', copiar en
		'blog/processor.py'  y hacer los ajustes.

	o 	Ahora vamos a registrar el procesador de contexto; en 'settings.py' en
		la sección: TEMPLATES


			TEMPLATES = [
			    {...
			    ...
			    'blog.processor.get_categories'
			],


	o 	Agregar en el layout

			<ul>
	            {% for category in categories %}
	                <li>
	                    <a href="#">{{category.1}}</a>
	                </li>   
	            {% endfor %}
            </ul>


* Mostrar en el menú solo aquellas categorías que tenga contenido asociados o publicados

	o 	Ajustar configuraciones en el procesador 'blog/processor.py'


			from blog.models import Category, Article

			   cat_in_use = Article.objects.filter(public=True).values_list('categories', flat=True)

    			categories = Category.objects.filter(id__in=cat_in_use).values_list('id', 'name')
    
			    return {
			        'categories': categories,
			        'ids': cat_in_use
			    }


* Hacer una pagina para cada categoria


	o 	--


* Mostrar Error 404

	o 	importar 'get_object_or_404' en urls.py

		from django.shortcuts import render, get_object_or_404

	o 	ajustar en la vista

		  category = get_object_or_404(Category, id=category_id)



*--- 19.11.2020 ---

* Una página para cada artículo

	o 	

* Personalizar los listados de gestión de página en el panel de admin.

	o 	Abrir 'admin.py' de la app 'pages'

		Agregar esta config en la clase:

			class PageAdmin(admin.ModelAdmin):
				readonly_fields = ('created_at', 'updated_at')
				search_fields = ('title', 'content')
				list_filter = ('visible',)
				list_display = ('title', 'visible', 'created_at')
				ordering = ('-created_at',)

	
		Agregar 'PageAdmin' en:

				 admin.site.register(Page, PageAdmin)



* Personalizacion #2 : 


* Paginación en Django

	o 	En la vista de la app 'Blog/views.py', agregar 'Paginator'

		from django.core.paginator import Paginator

	o 	Agregar una variable en la misma vista, ejemplo: paginator
		en la funcion list


		def list(request):

			
			paginator = Paginator(articles, 2)

			#  el 2 indica cuantos artículos por página

	o 	luego, coger el numero de pagina

		# coger numero de pagina / paginar todos los articulos

		page = request.GET.get('page')
		page_article = paginator.get_page(page)


	o 	Reemplazar la variable 'articles' el el return render de la 
		funcion 'list'

		 return render(request, 'articles/list.html', {
   
        'articles': articles <--- page_article
		})


*  Página de login/registro

* Personalizar la vista del formulario de registro basado en un modelo


*--  20 .11.2020

* Log in de usuario; vistas, templates

* Mostrar info del usuario autenticado y seleccionar paginas del menu

* decorators

	o 	Utilizando la vista de 'pages/views.py' como ejemplo.

		agregar:

		# restringir paginas/urls
		from django.contrib.auth.decorators import login_required

		# redirecciona a la pagina de log in
		@login_required(login_url='login')
		def page(request, slug):

* Impedir acceso a registro/login

* Uso de Mysql en django


	Para esta sección del curso, personalmente, yo voy a 
	utilizar PostgreSQL



	o 	En mi caso, intentare utilizar un DBMS previamente configurado
		con Docker. 

		Arranco el container:

			docker start psql12



	o 	Ajustar la configuracion en 'settings.py'

		comentar toda la sessión:

			"""
				DATABASES = {

				}
			"""

	o 	Agregar la nueva config de la bases de datos:


 		DATABASES = {
	     	'default': {
	        'ENGINE': 'django.db.backends.postgresql',
	        'USER': 'postgres',
	        'NAME': 'proyectp-zero-django',
	        'PASSWORD': 'hokusai8',
	        'HOST': 'localhost',
	        'PORT': 5432
	     	}
 		}

 	o 	Levantar 'pgadmin4' para revisar las tablas (opcional)

 		En mi caso, iniciar el container 

 			docker start pgadmin4

 		cuya IP en configuracion inicial es: 192.168.250.8


 	o 	Crear el Superusuario del Panel de Administración

 		python3 manage.py createsuperuser